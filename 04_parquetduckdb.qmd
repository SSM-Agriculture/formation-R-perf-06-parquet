---
editor: 
  markdown: 
    wrap: 72
---

# Manipuler des fichiers parquets avec duckdb {.backgroundTitre}

## Qu’est-ce que duckdb ?

DuckDB est un projet open-source qui propose un moteur SQL optimisé pour **réaliser des travaux d’analyse statistique sur des bases de données**.  

Plusieurs avantages :  

- Un **moteur portable** utilisable avec **plusieurs langages** (R, Python, Javascript...) et **plusieurs OS** (Windows, Linux, MacOS...)  
- Une **installation** et une **utilisation** très **facile**  

- Un **moteur SQL** capable d'utiliser des <u>données au format Parquet</u> **sans les charger complètement en mémoire**.  


::: callout-note

Il faut bien distinguer le projet DuckDB du package R duckdb qui propose simplement une façon d'utiliser Duckdb avec R.

:::


## À quoi sert le package duckdb ?

Du point de vue d’un statisticien utilisant R, le package duckdb permet de faire trois choses:

- Importer des données (exemples: fichiers CSV, fichiers Parquet)  
- Manipuler des données avec la syntaxe dplyr, ou avec le langage SQL  
- Écrire des données au format Parquet.  

## Alors arrow ou duckdb ?

Tableau repris de la documentation [utilitr](https://book.utilitr.org/)

| Je souhaite...                                                            | arrow | duckdb |
| ------------------------------------------------------------------------- | ----- | ------ |
| Optimiser mes traitements pour des données volumineuses                   | ✔️     | ✔️     |
| Travailler sur un fichier .parquet ou .csv sans le charger entièrement en mémoire | ✔️     | ✔️     |
| Utiliser la syntaxe `dplyr` pour traiter mes données                      | ✔️     | ✔️     |
| Utiliser du langage SQL pour traiter mes données                          | ❌     | ✔️     |
| Joindre des tables très volumineuses (plus de 4 Go)                          | ❌     | ✔️     |
| Utiliser des fonctions fenêtres (voir @sec-arrow)                          | ❌     | ✔️     |
| Utiliser des fonctions statistiques qui n'existent pas dans arrow (voir @sec-arrow) | ❌     | ✔️     |
| Écrire un fichier .parquet                                                | ✔️     | ✔️ *   |

## Installation de duckdb

Il suffit d’installer le package duckdb, qui contient à la fois DuckDB et une interface pour que R puisse s’y connecter.

Bonne nouvelle sur la version de Cerise mis à disposition en 2025, le package duckdb sera installé par défaut ! 🎉🎉🎉


## Connexions avec duckdb 

Pour utiliser duckdb, il n'est pas nécessaire de connaître le langage SQL car il est possible d'utiliser duckdb avec la syntaxe dplyr.  

duckdb est une base de données distante et s’utilise comme telle: il faut ouvrir une connexion, puis “charger” les données dans la base de données pour les manipuler.

```{.r}
con <- DBI::dbConnect(drv = duckdb::duckdb())
```

Plusieurs remarques :  

- Cette commande crée une nouvelle base de données duckdb dans la mémoire vive. 

- Cette base de données ne contient aucune donnée lorsqu’elle est créée. L’objet conn_ddb apparaît dans l’onglet Data de l’environnement RStudio, mais la liste des tables n’y est pas directement accessible

![](img/duckdb_fenetredata.png)
À la fin du traitement ou du programme, on ferme la connexion avec le code ci-dessous. L’option shutdown est importante : elle permet de fermer complètement la session duckdb et de libérer la mémoire utilisée.

```{.r}
DBI::dbDisconnect(con, shutdown = TRUE)
```

## Accéder aux métadonnées d'un fichier parquet avec duckdb

con <- dbConnect(duckdb())
dbGetQuery(con, "DESCRIBE FROM read_parquet('iris.parquet')")

# Le package nanoparquet permet d'obtenir des infos facilement depuis des fichiers parquet
parquet_info("iris.parquet")
parquet_metadata("iris.parquet")
parquet_schema("iris.parquet")
parquet_column_types("iris.parquet")

## duckplyr (TODO)
